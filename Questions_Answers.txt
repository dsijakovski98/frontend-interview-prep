* Backend
    1. HTTP Status codes?
        - 2xx => Success
            - 200 OK
            - 201 Created

        - 3xx => Redirection
            - 304 Not Modified
        
        - 4xx => Client error
            - 400 Bad Request
            - 401 Unauthorized
            - 404 Not Found
        
        - 5xx => Server error
            - 500 Internal Server Error

    2. HTTP request/response?
        - HTTP request is a message from the client to the server, there are many types of HTTP request messages, such as GET, POST, PUT, DELETE, UPDATE, PATCH etc
        - HTTP response is the message that the server sends back to the client in a reponse to a HTTP request.
        - Both HTTP request and response messages contain headers - key value pairs that contain some metadata about the message and optionally contain a body - the actual data being sent/received

    3. PUT vs PATCH vs POST?
        - HTTP PUT - creates a new resource on the server side, if such a resource already exists, it gets replaced by the new resource
        - HTTP PATCH - performs partial updates on a resource on the server side
        - HTTP POST - creates a new resource on the server side, it doesn't matter if such a resource already exists because this request will create a new one


* Frontend
    1. React Lifecycle methods?
        - Each React component goes through 3 phases during its lifetime:
            1. Mounting
                - constructor(props) - optional, gets called first, initializes state
                - static getDerivedStateFromProps(props, state) - optional, sets state based on props, returns object with new state
                - render() - must run, outputs the actual HTML to the DOM
                - componentDidMount() - optional

            2. Updating
                - static getDerivedStateFromProps(props, state) - optional
                - shouldComponentUpdate() - optional
                - render() - must run
                - getSnapshotBeforeUpdate() - optional
                - componentDidUpdate() - optional

            3. Unmounting
                - componentWillUnmount() - optional, use it to remove event listeners, timers etc


    2. OOP:
        2.1. Main components of OOP?
            - Encapsulation - the concept of banding together data and methods that refer to one entity (object)
            - Abstraction - keeping the unnecesarry logic away from the user, user just needs to know WHAT a method does, not HOW it does it
            - Inheritance - sharing data and behaviours among different classes, makes it so that the programmer has to write less code
            - Polymorphism - changing a single method to do different things based on who called it

        2.2 Interface?
            - An interface is a programming structure that enforces certain methods on an object, an object that implements an interface must implement the methods from that interface

        2.3 Abstract class?
            - Usually parent classes that child classes inherit from. Abstract classes contain abstract methods, which are methods not yet implemented by the parent, but by the child classes inheriting that class
            - Cannot be instantiated

        2.4 Interface vs Abstract class?
            - Interfaces cannot have properties, abstract classes can
            - Interfaces methods must be public, abstrac clasess' methods can be public or protected
            - All of the methods in an interface are abstract, the abstract keyword isn't needed, abstract classes can contain non-abstract methods
            - A class can inherit from only one parent class, but can implement multiple interfaces

        2.5 Virtual function?
            - Member methods inside a parent class that can be overwritten/redefined by child classes that inherit from that parent class


* Data Structures
    1. Arrays:
        - Data structure that holds multiple elements. They are stored in sequential memory addresses
        - Access - O(1)
        - Search - O(n)
        - Insert - O(n)
        - Delete - O(n)

    2. Linked List:
        - Data structures holding nodes (structures that contain values and a pointer to the next (and previous)) element in the list)
        - Access - O(n) single and double
        - Search - O(n) single and double
        - Insert
            - Start - O(1) single and double
            - End - O(n) single and double
        - Delete
            - Start - O(1) single and double
            - End - O(n) single and double

    3. Stack:
        - Data structure that works on the LIFO (Last In First Out) principle
        - Access - O(n)
        - Search - O(n)
        - Insert - O(1)
        - Delete - O(1)

    4. Queue:
        - Data structure that works on the FIFO (First In First Out) principle
        - Access - O(n)
        - Search - O(n)
        - Insert - O(1)
        - Delete - O(1)

    5. Binary Tree:
        - Data structure consisting of a root and children nodes, each node (except for the root) has some data, a parent node and at most 2 children nodes
        - Access - O(n)
        - Search - O(n)
        - Insert - O(n)
        - Delete - O(n)

    6. Hash Table:
        - Data structure that holds elements based on a index generated by a hash function
        - Access - O(n)
        - Search - O(n)
        - Insert - O(n)
        - Delete - O(n)